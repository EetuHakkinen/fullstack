{"version":3,"sources":["dbhandler.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","App","_useState","useState","_useState2","Object","slicedToArray","persons","setPersons","_useState3","_useState4","errorMessage","setErrorMessage","_useState5","_useState6","successMessage","setSuccessMessage","_useState7","_useState8","filterList","setFilterList","useEffect","axios","get","then","res","console","log","data","catch","e","error","filteredList","filter","p","name","toLowerCase","includes","react_default","a","createElement","App_Notification","message","tone","App_Filter","target","value","App_PersonForm","v","App_List","Filter","_ref","Fragment","onChange","PersonForm","_ref2","_useState9","_useState10","setName","_useState11","_useState12","number","setNumber","onSubmit","event","props","length","preventDefault","newPerson","post","concat","setTimeout","window","confirm","id","put","replaceNumber","type","List","_ref3","handleRemove","delete","deletePerson","map","i","key","onClick","Notification","_ref4","className","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee688914.chunk.js","sourcesContent":["import axios from 'axios';\nvar baseUrl = '/api/persons/'\n\nexport const getAll = () => {\n    return axios.get(baseUrl)\n        .then(res => {\n            console.log(res.data);\n            return res.data\n        })\n        .catch(e => {\n            console.error(e);\n            return [];\n        });\n}\n\nexport const addNumber = (props) => {\n    console.log('person', props);\n    return axios.post(baseUrl, props)\n        .then(res => {\n            console.log(res.data);\n            return res.data\n        })\n        .catch(e => console.error(e));\n}\n\nexport const deletePerson = (id) => {\n    return axios.delete(baseUrl + id);\n}\n\nexport const replaceNumber = (id, number, name) => {\n    return axios.put(baseUrl + id, { name, number });\n}","import React, { useState, useEffect } from 'react';\nimport { getAll, addNumber, deletePerson, replaceNumber } from './dbhandler';\nimport './App.css';\n\nconst App = () => {\n    const [persons, setPersons] = useState([]);\n    const [errorMessage, setErrorMessage] = useState(null);\n    const [successMessage, setSuccessMessage] = useState(null);\n    const [filterList, setFilterList] = useState('');\n\n    useEffect(() => {\n        getAll().then(data => setPersons(data));\n    }, [successMessage, errorMessage])\n\n    const filteredList = persons.filter(p => p.name.toLowerCase().includes(filterList.toLowerCase()));\n\n    return (\n        <div>\n            <h2>Puhelinluettelo</h2>\n            <Notification message={errorMessage} tone='error' />\n            <Notification message={successMessage} tone='success' />\n            <Filter filterList={filterList} setFilterList={e => setFilterList(e.target.value)} />\n            <PersonForm persons={persons} setPersons={v => setPersons(v)} setSuccessMessage={v => setSuccessMessage(v)} />\n            <h2>Numerot</h2>\n            <List filteredList={filteredList} setErrorMessage={v => setErrorMessage(v)} setSuccessMessage={v => setSuccessMessage(v)} />\n        </div>\n    )\n\n}\n\nexport default App;\n\nconst Filter = ({ filterList, setFilterList }) => {\n    return (\n        <>\n            rajaa näytettäviä: <input\n                value={filterList}\n                onChange={setFilterList}\n            />\n        </>\n    );\n}\n\nconst PersonForm = ({ persons, setPersons, setSuccessMessage }) => {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const submit = (event) => {\n        var personsList = persons.filter(p => p.name === name);\n        if (personsList.length === 0) {\n            event.preventDefault();\n            var newPerson = { name, number }\n            console.log(newPerson);\n            addNumber(newPerson).then(data => setPersons(persons.concat(data)))\n                .then(v => {\n                    setSuccessMessage('Lisättiin ' + name)\n                    setTimeout(() => {\n                        setSuccessMessage(null)\n                    }, 5000);\n                });\n            setName('');\n            setNumber('');\n        } else {\n            if (window.confirm(`${name} on jo luettelossa, korvataanko vanha numero uudella?`)) {\n                var id = persons.filter(p => p.name === name)[0].id\n                replaceNumber(id, number, name)\n                    .then(v => {\n                        setSuccessMessage(`Henkilön ${name} numero vaihdettiin`)\n                        setTimeout(() => {\n                            setSuccessMessage(null);\n                        }, 5000);\n                    });\n            }\n        }\n    }\n\n    return (\n        <>\n            <h3>Lisää uusi</h3>\n            <form onSubmit={submit}>\n                <div>\n                    nimi: <input\n                        value={name}\n                        onChange={e => setName(e.target.value)} />\n                </div>\n                <div>\n                    numero: <input\n                        value={number}\n                        onChange={e => setNumber(e.target.value)} />\n                </div>\n                <div>\n                    <button type=\"submit\">lisää</button>\n                </div>\n            </form>\n        </>\n    );\n}\n\nconst List = ({ filteredList, setSuccessMessage, setErrorMessage }) => {\n    const handleRemove = (id, name) => {\n        if (window.confirm(`Poistetaanko ${name}`)) {\n            deletePerson(id)\n                .then(v => {\n                    setSuccessMessage(`Poistettiin ${name}`)\n                    setTimeout(() => {\n                        setSuccessMessage(null);\n                    }, 5000);\n                })\n                .catch(v => {\n                    setErrorMessage(`Henkilö ${name} on jo poistettu`)\n                    setTimeout(() => {\n                        setErrorMessage(null);\n                    }, 5000)\n                })\n        }\n    }\n\n    return (\n        <>\n            {filteredList.map((p, i) => <div key={i}><span>{p.name} {p.number}</span><button onClick={() => handleRemove(p.id, p.name)}>poista</button></div>)}\n        </>\n    );\n}\n\nconst Notification = ({ message, tone }) => {\n    if (!message) {\n        return null;\n    }\n\n    return (\n        <div className={tone}>\n            {message}\n        </div>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}